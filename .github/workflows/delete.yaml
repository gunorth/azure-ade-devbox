name: Delete demo env

on:
  workflow_dispatch:
    inputs:
      DEVCENTER_NAME:
        description: 'DevCenter Name'     
        required: true
        default: 'devcenterdemolgm'
      PROJECT_NAME:
        description: 'Project Name' 
        required: true
        default: 'DevProject'
      RESOURCE_GROUP:
        description: 'Resource Group' 
        required: true
        default: 'rg-demo-ade'
      LOCATION:
        description: 'Location' 
        required: true
        default: 'westeurope'
      KV_NAME:
        description: 'Keyvault name' 
        required: true
        default: 'kv-demoadelgm'
      ACR_NAME:
        description: 'ACR name' 
        required: true
        default: 'acrdemoadelgm'
      PAT_TOKEN:
          description: 'PAT allowing to access your Github Repo' 
          required: false
      DEMO_USER:
        description: 'User used to access the DevCenter (must NOT be a guest user)' 
        required: true
        default: 'lgmorand@lgmdemo.onmicrosoft.com'
jobs:

  Delete:
    runs-on: ubuntu-latest
    steps:
      - name: AZ Login
        run: az login --service-principal -u ${{ vars.AZ_LOGIN }} -p ${{ secrets.AZ_PASSWORD }} --tenant ${{ vars.AZ_TENANT }}
 
      - name: Prerequisites
        run: |
          # install extension silently
          az config set extension.use_dynamic_install=yes_without_prompt

          # install extension
          az extension add --name devcenter --allow-preview true

      - name: Deleting everything
        run: |
          RED="\e[31m"
          GREEN="\e[32m"
          ORANGE="\e[95m"
          ENDCOLOR="\e[0m"


          echo "deleting pools"
          az devcenter admin pool delete --pool-name "DevPool" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" 
          az devcenter admin pool delete --pool-name "DevPoolPowerFull" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" 
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "Deleting environments"
          az devcenter admin environment-type delete --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "PROD" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin environment-type delete --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "TEST" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin environment-type delete --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --name "DEV" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "deleting project"
          az devcenter admin project delete --name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" 
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "deleting Dev Center"
          az devcenter admin devcenter delete --name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}"
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "deleting Keyvault"
          az keyvault delete -n "${{ github.event.inputs.KV_NAME }}" -g ${{ github.event.inputs.RESOURCE_GROUP }}
          az keyvault purge --name "${{ github.event.inputs.KV_NAME }}" -l ${{ github.event.inputs.LOCATION }}
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "deleting ACR"
          az acr delete -n ${{ github.event.inputs.ACR_NAME }} -g ${{ github.event.inputs.RESOURCE_GROUP }}
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo "deleting RG"
          az group delete -n ${{ github.event.inputs.RESOURCE_GROUP }}
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"



          # create a DevBox
          echo "Creating dev box"
          az devcenter admin devbox-definition create --location "${{ github.event.inputs.LOCATION }}" --image-reference id="/subscriptions/${{ vars.SUBSCRIPTION_ID }}/resourceGroups/${{ github.event.inputs.RESOURCE_GROUP }}/providers/Microsoft.DevCenter/devcenters/${{ github.event.inputs.DEVCENTER_NAME }}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2" --os-storage-type "ssd_256gb" --sku name="general_i_8c32gb256ssd_v2" --name "WebDevBox" --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          az devcenter admin devbox-definition create --location "${{ github.event.inputs.LOCATION }}" --image-reference id="/subscriptions/${{ vars.SUBSCRIPTION_ID }}/resourceGroups/${{ github.event.inputs.RESOURCE_GROUP }}/providers/Microsoft.DevCenter/devcenters/${{ github.event.inputs.DEVCENTER_NAME }}/galleries/default/images/microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2" --os-storage-type "ssd_512gb" --sku name="general_i_32c128gb512ssd_v2" --name "SuperPowerfulDevBox" --dev-center-name "${{ github.event.inputs.DEVCENTER_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # create a catalog
          echo "Creating catalog"
          SECRETID=$(az keyvault secret show --vault-name ${{ github.event.inputs.KV_NAME }} --name GHPAT --query id -o tsv)
          printf "${ORANGE} $SECRETID ${ENDCOLOR}\n"
          REPO_URL="https://github.com/lgmorand/azure-ade-devbox.git"
          az devcenter admin catalog create --git-hub path="/catalog" branch="main" secret-identifier=$SECRETID uri=$REPO_URL -n "EnvCatalog" -d "${{ github.event.inputs.DEVCENTER_NAME }}" -g ${{ github.event.inputs.RESOURCE_GROUP }} -o none
          REPO_URL="https://github.com/microsoft/devcenter-catalog.git"
          az devcenter admin catalog create --git-hub path="/Tasks" branch="main" secret-identifier=$SECRETID uri=$REPO_URL -n "QuickStart" -d "${{ github.event.inputs.DEVCENTER_NAME }}" -g ${{ github.event.inputs.RESOURCE_GROUP }} -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          # creating pools
          echo "Creating pools"
          az devcenter admin pool create --location "${{ github.event.inputs.LOCATION }}" --devbox-definition-name "WebDevBox" --pool-name "DevPool" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --local-administrator "Enabled" --virtual-network-type "Managed" --managed-virtual-network-regions "westeurope" -o none
          az devcenter admin pool create --location "${{ github.event.inputs.LOCATION }}" --devbox-definition-name "SuperPowerfulDevBox" --pool-name "DevPoolPowerFull" --project-name "${{ github.event.inputs.PROJECT_NAME }}" --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --local-administrator "Enabled" --virtual-network-type "Managed" --managed-virtual-network-regions "westeurope" -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"


          echo "creating projects environments types"
          OWNER_ROLE_ID=$(az role definition list -n "Owner" --scope /subscriptions/${{ vars.SUBSCRIPTION_ID }} --query '[].name' -o tsv)

          az devcenter admin project-environment-type create \
          --name "DEV" \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --project-name ${{ github.event.inputs.PROJECT_NAME }} \
          --roles "{\"$OWNER_ROLE_ID\":{}}" \
          --identity-type "SystemAssigned" \
          --deployment-target-id "/subscriptions/${{ vars.SUBSCRIPTION_ID }}" \
          --status "Enabled" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

        

          # Custom Image
          export IMAGE_BUILDER_GALLERY_NAME="imagebuildergallery"
          echo -e "Creating Azure Compute Gallery $IMAGE_BUILDER_GALLERY_NAME in $LOCATION"
          az sig create \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --location "${{ github.event.inputs.LOCATION }}" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"


          echo "Then you can associate the gallery with the Dev Center"
          az devcenter admin gallery create \
          --name $IMAGE_BUILDER_GALLERY_NAME \
          --gallery-resource-id $(az sig show --gallery-name $IMAGE_BUILDER_GALLERY_NAME --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv) \
          --dev-center "${{ github.event.inputs.DEVCENTER_NAME }}" \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo -e "Creating image definition vscodeImage in Azure Compute Gallery $IMAGE_BUILDER_GALLERY_NAME"

          az sig image-definition create \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --gallery-image-definition "vscodeImage" \
          --os-type "Windows" \
          --os-state "Generalized" \
          --publisher "lgmorand" \
          --offer "vscodebox" \
          --sku "1-0-0" \
          --hyper-v-generation "V2" \
          --features "SecurityType=TrustedLaunch" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          IMAGE_BUILDER_IDENTITY="image-builder-identity"
          echo -e "Creating Azure Image Builder identity $IMAGE_BUILDER_IDENTITY"

          IDENTITY_CLIENT_ID=$(az identity create \
          --name $IMAGE_BUILDER_IDENTITY \
          --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" \
          --query clientId -o tsv)
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          echo -e "Wait 30 seconds for the identity to be created 🕒"
          sleep 30

         

 

          # echo -e "Check the role was assigned successfully ✅"
          # az role assignment list --assignee $IDENTITY_CLIENT_ID --all -o table

          IDENTITY_ID=$(az identity show --name $IMAGE_BUILDER_IDENTITY --resource-group "${{ github.event.inputs.RESOURCE_GROUP }}" --query id -o tsv)
          
          echo -e "The easiest way to generate the template is using this assistant: https://portal.azure.com/#create/Microsoft.ImageTemplate"
          
          VSCODE_IMAGE_NAME="vscodeWinImage"
          VSCODE_RUN_OUTPUT_NAME="vscodeWinImageRunOutput"
          VSCODE_IMAGE_TEMPLATE="vscodeTemplate"
          VSCODE_IMAGE_DEFINITION="vscodeImage"

         
          
          az deployment group create \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --template-file tmp/win11-with-vscode.json \
          --parameters @tmp/win11-with-vscode-parameters.json \
          -o none
          
         

          IMAGE_REFERENCE_ID=$(az devcenter admin image show \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --dev-center ${{ github.event.inputs.DEVCENTER_NAME }} \
          --gallery-name $IMAGE_BUILDER_GALLERY_NAME \
          --name  $VSCODE_IMAGE_DEFINITION \
          --query id -o tsv)

          printf $"${ORANGE}\u2714 Image reference: $IMAGE_REFERENCE_ID ${ORANGE}\n\n"

          DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER="devbox-for-custom-image-with-image-builder"
          CUSTOM_IMAGE_DEV_BOX_POOL_NAME="custom-image-dev-box-pool"

          echo "creating the devbox-definition (40min)"
          time az devcenter admin devbox-definition create \
          --name $DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER \
          --dev-center ${{ github.event.inputs.DEVCENTER_NAME }} \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }} \
          --image-reference id=$IMAGE_REFERENCE_ID \
          --os-storage-type "ssd_256gb" \
          --sku name="general_i_8c32gb256ssd_v2" \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"

          sleep 10

          echo -e "Create a dev box pool for project name: ${{ github.event.inputs.PROJECT_NAME }}"

          time az devcenter admin pool create \
          --name "${CUSTOM_IMAGE_DEV_BOX_POOL_NAME}" \
          --project-name ${{ github.event.inputs.PROJECT_NAME }}" \
          --resource-group ${{ github.event.inputs.RESOURCE_GROUP }}  \
          --devbox-definition-name $DEV_BOX_FOR_CUSTOM_IMAGE_WITH_IMAGE_BUILDER \
          --local-administrator Enabled \
          --virtual-network-type Managed \
          --managed-virtual-network-regions ${{ github.event.inputs.LOCATION }} \
          -o none
          printf $"${GREEN}\u2714 Success ${ENDCOLOR}\n\n"
          


